// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    image         String?
    password      String?
    emailVerified DateTime?
    Blogs         Blogs[]
    Comments      Comments[]
    Like          Like[]
    UserImages    UserImages[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// ---------------------------------------------------

model Blogs {
    id          String     @id @default(uuid())
    title       String
    description String     @default("")
    body        String
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    createdAt   DateTime   @default(now())
    comments    Comments[]
    likes       Like[]
    images      Images[]
    private     Boolean    @default(false)
}

model Comments {
    id        String   @id @default(cuid())
    blogId    String
    createdAt DateTime @default(now())
    Blog      Blogs?   @relation(fields: [blogId], references: [id], onDelete: Cascade)
    User      User?    @relation(fields: [userId], references: [id])
    userId    String
    comment   String
}

model Like {
    id     String @id @default(uuid())
    Blog   Blogs? @relation(fields: [blogId], references: [id], onDelete: Cascade)
    User   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
    blogId String
    userId String
}

model Images {
    id        String      @id @default(cuid())
    blogId    String
    thumbnail Boolean     @default(false)
    Blogs     Blogs?      @relation(fields: [blogId], references: [id], onDelete: Cascade)
    image     UserImages? @relation(fields: [imageId], references: [id], onDelete: Cascade)
    imageId   String?
    url       String
}

model UserImages {
    id     String   @id
    url    String
    userId String
    User   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    images Images[]
    width  Int
    height Int
    bytes  Int
    format String
}
